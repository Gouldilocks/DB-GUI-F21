
name: EC2 Re-Deploy

# If we push to main branch then execute this actions script
on:
  push:
    branches: [ main ]

jobs:
# First we will see the application builds or not on GH actions, then we will deploy in EC2
  Build_on_GH-Actions_to_Verify_Working_condition:
    timeout-minutes: 3
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Build using docker_compose
      run: docker-compose build
      
    - name: Run using compose up
      run: docker-compose up
# Second job, which ssh into the ec2 and re-builds the docker container.
# This job ONLY RUNS if deployment on GH-actions is successful.
  Deploy_to_EC2_AWS_instance:
    timeout-minutes: 3
    needs: Build_on_GH-Actions_to_Verify_Working_condition
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2 
      - name: Deploy in EC2
        env: # These are the environment variables we need to connect
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.HOSTNAME  }}
            USER_NAME : ${{ secrets.USER_NAME  }}
            # Run this command. Essentially we create a private key on the EC2, ssh into the instance, pull from github, close the docker containers we have, and then build and deploy the new version.
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          
            #Now we have got the access of EC2 and we will start the deploy .
            cd ~/DB-GUI-F21 &&
            cd backend &&
            npm install &&
            yarn install &&
            cd .. &&
            cd frontend &&
            npm install &&
            yarn install &&
            cd .. &&
            git checkout main &&
            git stash &&
            git pull origin main &&
            docker stop $(docker ps -a -q) && 
            docker-compose build &&
            docker-compose up -d
          '
